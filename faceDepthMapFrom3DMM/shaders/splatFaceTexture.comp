#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform UniformBufferObject 
{
    uvec4 inBufferSize;
    uvec4 outBufferSize;
};

// diffuse texture to be splatted
layout (binding = 1, rgba32f) uniform readonly image2D imRender;

// uv+depth texture : uv are texture coordinate to the destination texture
layout (binding = 2, rgba32f) uniform readonly image2D imProjUVD0;

// splatted diffuse buffer
layout (binding = 3, std430) writeonly buffer buffDiffuse
{
   float rgbSplatBuff[];
};

void main()
{
   const ivec2 pos2In = ivec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
   if (any(greaterThanEqual(pos2In,inBufferSize.xy))) return;
   
   // NB : should use Texture   
   const vec4 rgbRender = imageLoad(imRender,pos2In);
   const vec2 uvRender = imageLoad(imProjUVD0,pos2In).rg;

   const uvec2 pos2Out = uvec2(((vec2(pos2In)/vec2(outBufferSize.xy))*vec2(outBufferSize.xy)));
   const uint idOut = uint( (pos2Out.y*outBufferSize.x + pos2Out.x) * outBufferSize.z);
   rgbSplatBuff[idOut] = 1.0;
   rgbSplatBuff[idOut+1] = 1.0;
   rgbSplatBuff[idOut+2] = 0.0;
}